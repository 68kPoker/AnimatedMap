
1. Introduction

"Animated Map" is a graphics engine that draws scrollable map with animated 
elements.

There are 2 types of animated elements:

- Static  - just animations,
- Dynamic - movable objects.

The map and static objects are drawn using fast Blitter mode D = A, where 
A is a data.

These static objects are stored as 16x16 tiles (one or multiple).

Movable objects are drawn using normal Blitter mode D = AB + aC, where 
A is a mask, B is a data, and C is a background.

Movable objects are stored as one or multiple 16x16 tiles as well, for better 
graphics organisation. The width and height is then specified in tiles.

The movable object background is stored as tiles. So the multiple object in 
one place are stored once.

Map (chamber) is scrolled by multiplication of 16 pixels in any direction.

The scrolling is done using tile update. If same tile was already drawn in 
a given place it is not updated there.

The movable objects are drawn always, when moved or when the tile background 
nearby was affected by static or movable object.

"Animated Map" works in any aligned Layer/Window/RastPort. The window borders 
are 16-pixels thick and can be used to display additional information.

The game is meant to work on Custom Screen due to these display restrictions.

The screen should be double-buffered. Then the previous position in both 
buffers for all movable objects should be stored.

2. File description

File        Description
------------------------------------------------------------------------------
Screen      Double buffered screen,

Windows     Aligned 16x16 windows with borders,

Map         Tile and static object array, static object updating, 
            map scrolling with optimization,

Movable     Movable object list, restoring background, affecting non-changed
            objects, comparing the movable object state (position, frame)
            with previous state in given buffer,

Blitter     Low-level drawing algorithms,

Game        Game-specific routines: Static and Movable object animation
            handlers, input handlers.
------------------------------------------------------------------------------
